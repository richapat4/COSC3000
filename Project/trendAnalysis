import dash
from dash import Dash, html, dcc
from dash.dependencies import Input, Output,State
import plotly.graph_objs as go
import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import pycountry 
import geopandas as gpd
import plotly.express as px
import plotly.graph_objects as go
from shapely.geometry import Polygon, MultiPolygon
import json
import numpy as np
import seaborn as sns
import itertools 
import base64
import dash_bootstrap_components as dbc
import polarPlot
import statsmodels.api as sm
import pylab as py

import scipy.stats as stats
from statsmodels.graphics.gofplots import qqplot_2samples

original_df = pd.read_csv("Project\\WhalingData.csv").dropna()
original_df['Nation'].replace({"USSR": "Russia"}, inplace=True)

original_df['Type'] = original_df['Type'].str.title()

locations = pd.read_csv("Project\\Whaling Locations1.csv")

df = original_df.groupby(['Year','Nation'])['Fin', 'Sperm', 'Humpback', 'Sei', 'Bryde\'s', 'Minke', 'Gray', 'Bowhead', 'Total'].sum().reset_index()

df_1 = original_df.groupby(['Year'])['Fin', 'Sperm', 'Humpback', 'Sei', 'Bryde\'s', 'Minke', 'Gray', 'Bowhead'].sum().reset_index()

def alpha3code(column):
    CODE=[]
    for country in column:
        try:
            # print(country)
            if(country == "USSR"):
                
                country == "USSR, Union of Soviet Socialist Republics"
                code=pycountry.countries.get(alpha_3='RUS').alpha_3
            elif(country == "St.Vincent & Grenadines"):
                code = pycountry.countries.get(name="Saint Vincent and the Grenadines").alpha_3
            elif(country == "Korea"):
                code = pycountry.countries.get(name='Korea, Republic of').alpha_3
            elif(country == "Russia"):
                 code = pycountry.countries.get(name='Russian Federation').alpha_3
            elif(country == "USA"):
               code = pycountry.countries.get(alpha_3='USA').alpha_3
            else:
                code=pycountry.countries.get(name=country).alpha_3

            CODE.append(code)
        except:
            CODE.append('None')
    return CODE


df['CODE']=alpha3code(df['Nation'])

haline_colors = px.colors.sequential.haline
# values = df['CODE']=alpha3code(df['Nation'])
# value = 'JPN'
# trend = df[df['CODE'] == value].reset_index()
# poly = np.polyfit(trend['Year'], trend['Total'], 5)
# trend['polyFit'] = np.polyval(poly,trend['Year'])
colors = {
    'JPN': haline_colors[0],
    'RUS': haline_colors[1],
    'DNK': haline_colors[2],
    'ISL': haline_colors[3],
    'IDN': haline_colors[4],
    'KOR': '#00bfff',
    'NOR': '#890089',
    'VCT':  'gray',
    'USA': haline_colors[8],
    'PRT': haline_colors[9],
    'CAN': haline_colors[10]
}

polyFig = px.scatter(df, x='Year', y='Total',color= df.CODE,log_y=True,color_discrete_map=colors,template='plotly_white')
polyFig.update_yaxes(type='log',title="Number of Whales")
polyFig.update_layout(title='Whaling over Time by Nation')
polyFig.update_xaxes(title= 'Year')

# polyFig.data = [t for t in polyFig.data if t.mode == "lines"]


# lineFig = px.line(df, x='Year', y='Total',color= df.CODE,log_y=True,symbol='CODE', symbol_sequence=['circle'],line_dash='CODE',line_dash_sequence=['dash'])

# for data in lineFig.data:
#     polyFig.add_traces(data)

# polyFig.update_layout()

polyFig.show()
# polyFig.add_traces(px.line(trend, x='Year', y='polyFit',color= trend.CODE).data[0])


  
# np.random generates different random numbers
# whenever the code is executed
# Note: When you execute the same code 
# the graph look different than shown below.
  
# Random data points generated


df_1.to_csv("Whales and years.csv")

data1= df["Fin"]
data2 = df["Sei"]


quantiles1 = sm.ProbPlot(data1)

# # Calculate the normal distribution's quantiles
# norm_quantiles1 = stats.norm.ppf(quantiles1[0])

quantiles2 = sm.ProbPlot(data2)

# # Calculate the normal distribution's quantiles
# norm_quantiles2 = stats.norm.ppf(quantiles2[0])

# # # Create a Q-Q plot
plt.scatter(quantiles1,quantiles2)
plt.show()
  
fig = qqplot_2samples(quantiles1,quantiles2,line='45')
plt.show()
