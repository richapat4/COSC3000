import colorspacious as cs
import matplotlib.pyplot as plt
import plotly.express as px
import numpy as np

import matplotlib.colors as mcolors
from PIL import Image

def check_colour(color):
    if any(val < 0 for val in color):
        color = [-1 * val if val < 0 else val for val in color]
    return color


haline_colors = px.colors.sequential.haline

red_cols = px.colors.sequential.YlOrRd[2:]

# Define cvd space
cvd_space = {"name": "sRGB1+CVD",
             "cvd_type": "deuteranomaly",
             "severity": 100}

# Define cvd space
cvd_space_1 = {"name": "sRGB1+CVD",
             "cvd_type": "protanomaly",
             "severity": 100}

# Define cvd space
cvd_space_2 = {"name": "sRGB1+CVD",
             "cvd_type": "tritanomaly",
             "severity": 100}

# # Define colors
colors = [
    [41, 24, 107],
    [42, 35, 160],
    [15, 71, 153],
    [18, 95, 142],
    [38, 116, 137],
    [53, 136, 136],
    [65, 157, 133],
    [81, 178, 124],
    [111, 198, 107],
    [160, 214, 91],
    [212, 225, 112],
    [253, 238, 153]
]

# The output of the code will be a list of color tuples:

# (53, 136, 136), (65, 157, 133) 4 and 5
# (15, 71, 153) # 3

# (81, 178, 124)


# (62, 126, 113)

haline_colors = [(41, 24, 107), (42, 35, 160), (15, 71, 153) ,(83, 127, 198),(95, 163, 188), (38, 116, 137), (1, 140, 167), (70,154,107), (111, 198, 107), (160, 214, 91), 
                 (212, 225, 112), (253, 238, 153)]

red_colors = [(254, 217, 118), (254, 178, 76), (253, 141, 60), (252, 78, 42), (227, 26, 28), (189, 0, 38), (128, 0, 38)]

colors = haline_colors
# Convert colors to sRGB1
colors_sRGB1 = cs.cspace_convert(np.array(colors), "sRGB255", "sRGB1")

# # Apply cvd simulation
colors_cvd1 = cs.cspace_convert(colors_sRGB1, cvd_space, "sRGB1")
colors_cvd2 = cs.cspace_convert(colors_sRGB1, cvd_space_1, "sRGB1")
colors_cvd3 = cs.cspace_convert(colors_sRGB1, cvd_space_2, "sRGB1")

# Convert colors back to sRGB255
colors_sRGB255_cvd = cs.cspace_convert(colors_cvd1, "sRGB1", "sRGB255")
colors_sRGB255_cvd1 = cs.cspace_convert(colors_cvd2, "sRGB1", "sRGB255")
colors_sRGB255_cvd2 = cs.cspace_convert(colors_cvd3, "sRGB1", "sRGB255")

i = 0 
# Plot original and simulated colors
fig, ax = plt.subplots(1,5, figsize=(12, 1))
for color1,color2,color3 in zip(colors_sRGB255_cvd,colors_sRGB255_cvd1,colors_sRGB255_cvd2):
    # has_negative = any(i < 0 for i in color)
    color1 = check_colour(color1)
    color2 = check_colour(color2)
    color3 = check_colour(color3)
    color4_I = (np.dot(colors[i], [0.2989, 0.5870, 0.1140]))
    color4 = []
    color4.append((color4_I,color4_I,color4_I))
    # print(color4)
    g = [1 if x/255 > 1 else x/255 for x in color4[0]]

    m = [1 if x/255 > 1 else x/255 for x in colors[i]]

    a = [1 if x/255 > 1 else x/255 for x in color1]
    b = [1 if x/255 > 1 else x/255 for x in color2]
    c = [1 if x/255 > 1 else x/255 for x in color3]
    # print(c)
    # # print(m)
    hex_value = mcolors.rgb2hex(a)
    ax[0].axhline(y=i, color=hex_value, linewidth=30)
    ax[0].set_title("Deuteranomaly,\n Severity = 100", fontdict= dict(size = 18))
    hex_value = mcolors.rgb2hex(b)
    ax[1].axhline(y=i, color=hex_value, linewidth=30)
    ax[1].set_title("Protanomaly,\n Severity = 100", fontdict= dict(size = 18))
    hex_value = mcolors.rgb2hex(c)
    ax[2].axhline(y=i, color=hex_value, linewidth=30)
    ax[2].set_title("Tritanomaly,\n Severity = 100", fontdict= dict(size = 18))

    hex_value2 = mcolors.rgb2hex(g)
    ax[3].axhline(y=i, color=hex_value2, linewidth=30)
    ax[3].set_title("Modified Haline B/W", fontdict= dict(size = 18))

   
    hex_value2 = mcolors.rgb2hex(m)
    ax[4].axhline(y=i, color=hex_value2, linewidth=30)
    ax[4].set_title("Modified Haline", fontdict= dict(size = 18))

    i+=1
    
plt.show()

